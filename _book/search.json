[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for the Rest of Us: A Statistics-Free Introduction",
    "section": "",
    "text": "About the Book\nThe R programming language is a remarkably powerful tool for data analysis and visualization, but its steep learning curve can be intimidating for some. If you just want to automate repetitive tasks or visualize your data, without the need for complex math, R for the Rest of Us is for you.\nInside you’ll find a crash course in R, a quick tour of the RStudio programming environment, and a collection of real-word applications that you can put to use right away. You’ll learn how to create informative visualizations, streamline report generation, and develop interactive websites—whether you’re a seasoned R user or have never written a line of R code.\nYou’ll also learn how to:\n\nManipulate, clean, and parse your data with tidyverse packages like dplyr and tidyr to make data science operations more user-friendly\nCreate stunning and customized plots, graphs, and charts with ggplot2 to effectively communicate your data insights\nImport geospatial data and write code to produce visually appealing maps automatically\nGenerate dynamic reports, presentations, and interactive websites with R Markdown and Quarto that seamlessly integrate code, text, and graphics\nDevelop custom functions and packages tailored to your specific needs, allowing you to extend R’s functionality and automate complex tasks\n\nUnlock a treasure trove of techniques to transform the way you work. With R for the Rest of Us, you’ll discover the power of R to get stuff done. No advanced statistics degree required.\n\n\nAbout the Author\n\nDavid Keyes is the founder and CEO of R for the Rest of Us, which offers online courses, workshops, and custom training sessions that help organizations take control of their data. He has a PhD in anthropology from UC San Diego, as well as a master’s degree in education from Ohio State, and has dedicated his professional life to teaching people to embrace R as the most powerful tool for data analysis and visualization.\n\n\nAcknowldgements\nThis book is a testament to the many members of the R community who share their knowledge freely and encourage others generously. I call myself self-taught, but really what I am is community-taught. Throughout this book, you will read about several R users from whom I have learned so much; still, many others go unmentioned. To everyone who has worked to develop R, share your knowledge about R, and make R a welcoming place, thank you.\nI’d also like to thank the team at R for the Rest of Us. Working directly with talented R users has taught me so much about what is possible with R.\nFinally, I’d like to thank people who have provided feedback as I’ve written this book. Technical reviewer Rita Giordano has helped me make sure everything works and suggested great ideas for improvement. My editor, Frances Saux, has provided fantastic input along the way. To Bill Pollock and the entire team at No Starch: thank you for taking a flyer on me and my strange idea to write a book about nonstatistical uses of a tool created for statistics.",
    "crumbs": [
      "About the Book"
    ]
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Isn’t R Just for Statistical Analysis?\nMany people think of R as simply a tool for hardcore statistical analysis, but it can do much more than manipulate numerical values. After all, every R user must illuminate their findings and communicate their results somehow, whether that’s via data visualizations, reports, websites, or presentations. Also, the more you use R, the more you’ll find yourself wanting to automate tasks you currently do manually.\nAs a qualitatively trained anthropologist without a quantitative background, I used to feel ashamed about using R for my visualization and communication tasks. But the fact is, R is good at these jobs. The ggplot2 package is the tool of choice for many top information designers. Users around the world have taken advantage of R’s ability to automate reporting to make their work more efficient. Rather than simply replacing other tools, R can perform tasks that you’re probably already doing, like generating reports and tables, better than your existing workflow.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#who-this-book-is-for",
    "href": "introduction.html#who-this-book-is-for",
    "title": "1  Introduction",
    "section": "Who This Book Is For",
    "text": "Who This Book Is For\nNo matter your background, using R can transform your work. This book is for you if you’re either a current R user keen to explore its uses for visualization and communication or a non-R user wondering if R is right for you. I’ve written R for the Rest of Us so that it should make sense whether or not you’ve ever written a line of R code. But even if you’ve written entire R programs, the book should help you learn plenty of new techniques to up your game.\nR is a great tool for anyone who works with data. Maybe you’re a researcher looking for a new way to share your results. Perhaps you’re a journalist looking to analyze public data more efficiently. Or maybe you’re a data analyst tired of working in expensive, proprietary tools. If you have to work with data, you will get value from R.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#about-this-book",
    "href": "introduction.html#about-this-book",
    "title": "1  Introduction",
    "section": "About This Book",
    "text": "About This Book\nEach chapter focuses on one use of the R language and includes examples of real R projects that employ the techniques covered. I’ll dive into the project code, breaking the programs down to help you understand how they work, and suggest ways of going beyond the example. The book has three parts, outlined here.\nIn Part I, you’ll learn how to use R to visualize data.\n\nChapter 1: An R Programming Crash Course Introduces the RStudio programming environment and the foundational R syntax you’ll need to understand the rest of the book.\nChapter 2: Principles of Data Visualization Breaks down a visualization created for Scientific American on drought conditions in the United States. In doing so, this chapter introduces the ggplot2 package for data visualization and addresses important principles that can help you make high-quality graphics.\nChapter 3: Custom Data Visualization Themes Describes how journalists at the BBC made a custom theme for the ggplot2 data visual- ization package. As the chapter walks you through the package they created, you’ll learn how to make your own theme.\nChapter 4: Maps and Geospatial Data Explores the process of making maps in R using simple features data. You’ll learn how to write map-making code, find geospatial data, choose appropriate projections, and apply data visualization principles to make your map appealing.\nChapter 5: Designing Effective Tables Shows you how to use the gt package to make high-quality tables in R. With guidance from R table connoisseur Tom Mock, you’ll learn the design principles to present your table data effectively.\n\nPart II focuses on using R Markdown to communicate efficiently. You’ll learn how to incorporate visualizations like the ones discussed in Part I into reports, slideshow presentations, and static websites generated entirely using R code.\n\nChapter 6: R Markdown Reports Introduces R Markdown, a tool that allows you to generate a professional report in R. This chapter covers the structure of an R Markdown document, shows you how to use inline code to automatically update your report’s text when data values change, and discusses the tool’s many export options.\nChapter 7: Parameterized Reporting Covers one of the advantages of using R Markdown: the ability to produce multiple reports at the same time using a technique called parameterized reporting. You’ll see how staff members at the Urban Institute used R to generate fiscal briefs for all 50 US states. In the process, you’ll learn how parameterized reporting works and how you can use it.\nChapter 8: Slideshow Presentations Explains how to use R Markdown to make slides with the xaringan package. You’ll learn how to make your own presentations, adjust your content to fit on a slide, and add effects to your slideshow.\nChapter 9: Websites Shows you how to create your own website with R Markdown and the distill package. By examining a website about COVID-19 rates in Westchester County, New York, you’ll see how to create pages on your site, add interactivity through R packages, and deploy your website in multiple ways.\nChapter 10: Quarto Explains how to use Quarto, the next-generation version of R Markdown. You’ll learn how to use Quarto for all of the projects you previously used R Markdown for (reports, parameterized reporting, slideshow presentations, and websites).\n\nPart III focuses on ways you can use R to automate your work and share it with others.\n\nChapter 11: Automatically Accessing Online Data Explores two R packages that let you automatically import data from the internet: googlesheets4 for working with Google Sheets and tidycensus for working with US Census Bureau data. You’ll learn how the packages work and how to use them to automate the process of accessing data.\nChapter 12: Creating Functions and Packages Shows you how to create your own functions and packages and share them with others, which is one of R’s major benefits. Bundling your custom functions into a package can enable other R users to streamline their work, as you’ll read about with the packages that a group of R developers built for researchers working at the Moffitt Cancer Center.\n\nBy the end of this book, you should be able to use R for a wide range of nonstatistical tasks. You’ll know how to effectively visualize data and com- municate your findings using maps and tables. You’ll be able to integrate your results into reports using R Markdown, as well as efficiently generate slideshow presentations and websites. And you’ll understand how to automate many tedious tasks using packages others have built or ones you develop yourself. Let’s dive in!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "crash-course.html",
    "href": "crash-course.html",
    "title": "\n1  An R Programming Crash Course\n",
    "section": "",
    "text": "Setting Up\nYou’ll need two pieces of software to use R effectively. The first is R itself, which provides the underlying computational tools that make the language work. The second is an integrated development environment (IDE) like RStudio. This coding platform simplifies working with R. The best way to understand the relationship between R and RStudio is with this analogy from Chester Ismay and Albert Kim’s book Statistical Inference via Data Science: A Modern Dive into R and the Tidyverse: R is the engine that powers your data, and RStudio is like the dashboard that provides a user-friendly interface.",
    "crumbs": [
      "Part I: Visualizations",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>An R Programming Crash Course</span>"
    ]
  },
  {
    "objectID": "crash-course.html#setting-up",
    "href": "crash-course.html#setting-up",
    "title": "\n1  An R Programming Crash Course\n",
    "section": "",
    "text": "Installing R and RStudio\nTo download R, go to https://cloud.r-project.org and choose the link for your operating system. Once you’ve installed it, open the file. This should open an interface, like the one shown in Figure 1.1, that lets you work with R on your operating system’s command line. For example, enter 2 + 2, and you should see 4.\n\n\n\n\n\nFigure 1.1: The R console\n\n\nA few brave souls work with R using only this command line, but most opt to use RStudio, which provides a way to see your files, the output of your code, and more. You can download RStudio at https://posit.co/download/rstudio-desktop/. Install RStudio as you would any other app and open it.\nExploring the RStudio Interface\nThe first time you open RStudio, you should see the three panes shown in Figure 1.2.\n\n\n\n\n\nFigure 1.2: The RStudio editor\n\n\nThe left pane should look familiar. It’s similar to the screen you saw when working in R on the command line. This is known as the console. You’ll use it to enter code and see the results. This pane has several tabs, such as Terminal and Background Jobs, for more advanced uses. For now, you’ll stick to the default tab. At the bottom right, the files pane shows all of the files on your com- puter. You can click any file to open it within RStudio. Finally, at the top right is the environment pane, which shows the objects that are available to you when working in RStudio. Objects are discussed in “Saving Data as Objects” on page 11. There is one more pane that you’ll typically use when working in RStudio, but to see it, first you need to create an R script file.",
    "crumbs": [
      "Part I: Visualizations",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>An R Programming Crash Course</span>"
    ]
  },
  {
    "objectID": "crash-course.html#r-script-files",
    "href": "crash-course.html#r-script-files",
    "title": "\n1  An R Programming Crash Course\n",
    "section": "R Script Files",
    "text": "R Script Files\nIf you write all of your code in the console, you won’t have any record of it. Say you sit down today and import your data, analyze it, and then make some graphs. If you run these operations in the console, you’ll have to re- create that code from scratch tomorrow. But if you write your code in files instead, you can run it multiple times.\nR script files, which use the .R extension, save your code so you can run it later. To create an R script file, go to File &gt; New File &gt; R Script, and the script file pane should appear in the top left of RStudio, as shown in Figure 1.3. Save this file in your Documents folder as sample-code.R.\n\n\n\n\n\nFigure 1.3: The script file pane (top left)\n\n\nNow you can enter R code into the new pane to add it to your script file. For example, try entering 2 + 2 in the script file pane to perform a simple addition operation.\nTo run a script file, click Run or use the keyboard shortcut command-enter on macOS or ctrl-enter on Windows. The result (4, in this case) should show up in the console pane.\nYou now have a working programming environment. Next you’ll use it to write some simple R code.",
    "crumbs": [
      "Part I: Visualizations",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>An R Programming Crash Course</span>"
    ]
  },
  {
    "objectID": "crash-course.html#basic-r-syntax",
    "href": "crash-course.html#basic-r-syntax",
    "title": "\n1  An R Programming Crash Course\n",
    "section": "Basic R Syntax",
    "text": "Basic R Syntax\nIf you’re trying to learn R, you probably want to perform more complex operations than 2 + 2, but understanding the fundamentals will prepare you to do more serious data analysis tasks later in this chapter. Let’s cover some of these basics.\nArithmetic Operators\nBesides +, R supports the common arithmetic operators - for subtraction, * for multiplication, and / for division. Try entering the following in the console:\n\n2 - 1\n\n[1] 1\n\n\n\n3 * 3\n\n[1] 9\n\n\n\n16 / 4\n\n[1] 4\n\n\nAs you can see, R returns the result of each calculation you enter. You don’t have to add the spaces around operators as shown here, but doing so makes your code much more readable.\nYou can also use parentheses to perform multiple operations at once and see their result. The parentheses specify the order in which R will evaluate the expression. Try running the following:\n\n2 * (2 + 1)\n\n[1] 6\n\n\nThis code first evaluates the expression within the parentheses, 2 + 1, before multiplying the result by 2 in order to get 6.\nR also has more advanced arithmetic operators, such as ** to calculate exponents:\n\n2 ** 3\n\n[1] 8\n\n\nThis is equivalent to 23, which returns 8.\nTo get the remainder of a division operation, you can use the %% operator:\n\n10 %% 3\n\n[1] 1\n\n\nDividing 10 by 3 produces a remainder of 1, the value R returns.\nYou won’t need to use these advanced arithmetic operators for the activities in this book, but they’re good to know nonetheless.\nComparison Operators\nR also uses comparison operators, which let you test how one value compares to another. R will return either TRUE or FALSE. For example, enter 2 &gt; 1 in the console:\n\n2 &gt; 1\n\n[1] TRUE\n\n\nR should return TRUE, because 2 is greater than 1.\nOther common comparison operators include less than (&lt;), greater than or equal to (&gt;=), less than or equal to (&lt;=), equal to (==), and not equal to (!=). Here are some examples:\n\n498 == 498\n\n[1] TRUE\n\n\n\n2 != 2\n\n[1] FALSE\n\n\nWhen you enter 498 == 498 in the console, R should return TRUE because the two values are equal. If you run 2 != 2 in the console, R should return FALSE because 2 does not not equal 2.\nYou’ll rarely use comparison operators to directly test how one value compares to another; instead, you’ll use them to perform tasks like keeping only data where a value is greater than a certain threshold. You’ll see com- parison operators used in this way in “tidyverse Functions” (Section 1.4.2).\nFunctions\nYou can perform even more useful operations by making use of R’s many functions, predefined sections of code that let you efficiently do specific things. Functions have a name and a set of parentheses containing arguments, which are values that affect the function’s behavior.\nConsider the print() function, which displays information:\n\nprint(x = 1.1)\n\n[1] 1.1\n\n\nThe name of the print() function is print. Within the function’s parentheses, you specify the argument name–x, in this case—followed by the equal sign (=) and a value for the function to display. This code will print the number 1.1.\nTo separate multiple arguments, you use commas. For example, you can use the print() function’s digits argument to indicate how many digits of a number to display:\n\nprint(x = 1.1, digits = 1)\n\n[1] 1\n\n\nThis code will display only one digit (in other words, a whole number).\nUsing these two arguments allows you to do something specific (display results) while also giving you the flexibility to change the function’s behavior.\n\n\n\n\n\n\nNote\n\n\n\nFor a list of all functions built into R, see https://stat.ethz.ch/R-manual/R-devel/library/base/html/00Index.html.\n\n\nA common R pattern is using a function within a function. For example, if you wanted to calculate the mean, or average, of the values 10, 20, and 30, you could use the mean() function to operate on the result of the c() function like so:\n\nmean(x = c(10, 20, 30))\n\n[1] 20\n\n\nThe c() function combines multiple values into one, which is necessary because the mean() function accepts only one argument. This is why the code has two matching sets of open and close parentheses: one for mean() and a nested one for c().\nThe value after the equal sign in this example, c(10, 20, 30), tells R to use the values 10, 20, and 30 to calculate the mean. Running this code in the console returns the value 20.\nThe functions median() and mode() work with c() in the same way. To learn how to use a function and what arguments it accepts, enter ? followed by the function’s name in the console to see the function’s help file.\nNext, let’s look at how to import data for your R programs to work with.",
    "crumbs": [
      "Part I: Visualizations",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>An R Programming Crash Course</span>"
    ]
  },
  {
    "objectID": "crash-course.html#sec-tidyverse-functions",
    "href": "crash-course.html#sec-tidyverse-functions",
    "title": "\n2  An R Programming Crash Course\n",
    "section": "tidyverse Functions",
    "text": "tidyverse Functions",
    "crumbs": [
      "Part I: Visualizations",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An R Programming Crash Course</span>"
    ]
  },
  {
    "objectID": "crash-course.html#working-with-data",
    "href": "crash-course.html#working-with-data",
    "title": "\n1  An R Programming Crash Course\n",
    "section": "Working with Data",
    "text": "Working with Data\nR lets you do all of the same data manipulation tasks you might perform in a tool like Excel, such as calculating averages or totals. Conceptually, however, working with data in R is very different from working with Excel, where your data and analysis code live in the same place: a spreadsheet. While the data you work with in R might look similar to the data you work with in Excel, it typically comes from some external file, so you have to run code to import it.\nImporting Data\nYou’ll import data from a comma-separated values (CSV) file, a text file that holds a series of related values separated by commas. You can open CSV files using most spreadsheet applications, which use columns rather than commas as separators. For example, Figure 1.4 shows the population-by-state.csv file in Excel.\n\n\n\n\n\nFigure 1.4: The population-by-state.csv file in Excel\n\n\ntidyverse Functions",
    "crumbs": [
      "Part I: Visualizations",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>An R Programming Crash Course</span>"
    ]
  }
]